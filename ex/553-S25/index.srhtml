<%= pagetop("01:198:553 Spring 2025: Design of Internet
Services Home") %>

<div id="overview">
<div id="overview_main">

<h2>I. Overview</h2>

<p>The digital revolution has made our lives ever more
intertwined with services offered over the Internet. The
list goes on: question-answering (search), news, gaming,
shopping, banking, food delivery, ridesharing, social
networking, on-demand video entertainment, and online
education. Today's Internet services offer slick user
interfaces, scale to meet the needs of billions of users,
while staying "always available" and responding at the tap
of a finger. This course will enable students understand the
building blocks of modern Internet services.

<p><b>How are modern Internet services designed?</b></p>

<p>Many technologies (and fields of study) come together to
make modern Internet services possible. This course will
provide students with a technical understanding of the
architecture of modern Internet services. Lectures will
introduce the fundamental principles and concepts from
computer systems and networking that make modern Internet
services possible. We will invest significant time to study
and discuss technical literature including research
papers. Building on a solid conceptual understanding,
students will gain experience in how such principles are
used in practice: The course will include hands-on
programming assignments with modern and classic technologies
in the space of Internet services.  In the latter half of
the term, students will also work on an instructor-assisted
research-grade programming project on a course topic of
their choice. Overall, students can expect this course to
provide a solid foundation for technology career paths in
the industry or further academic study in this field. </p>

The topics we will discuss include the following
<ul>

<li>Internet architecture and service delivery: layering,
protocols, routing, transport, content delivery
networks</li>

<li>Application architecture: web server design,
microservices, serverless, partition-aggregate,
map-reduce</li>

<li>Infrastructure: virtualization, containers &
orchestration, software-defined networking, service
communication</li>
 
<li>Distributed system design: coordination services, consensus,
distributed storage, load management</li>

<li>Operations: monitoring & observability, access control,
scaling, incident management</li>

</ul>

and others, time permitting.

<h2>II. Course Logistics</h2>

<ul>

<li>Lecture times: Wed 8:30 - 11:30 am ET </li>

<li>Lecture location: Busch <a
href="https://maps.rutgers.edu/map#/?click=true&lat=40.521903&lng=-74.462391&selected=3752&sidebar=true&underConstructionState=true&zoom=20">HLL 116</a>

<li>Office hours / student support hours: by appointment
(write to email)
</li>

<li>Office location: CoRE 312 or use the provided Zoom link
once we set up an appointment. </li>

<li>Instructor: <a
href="http://www.cs.rutgers.edu/~sn624/">Srinivas
Narayana</a>

<li>Instructor contact: sn624@cs.rutgers.edu</li>

<li>Teaching assistant: <a
href="https://bhavanavs.github.io/">Bhavana Vannarth
Shobhana</a></li>

<li>TA contact: bvs17@cs.rutgers.edu</li>

<li>Canvas site: <a
href="https://rutgers.instructure.com/courses/336498">CS 553
Canvas</a></li>

<li>Discord server: See link on Canvas</li>

</ul>

<p>This course will use Canvas and Discord.</p>

<p>Lecture materials and the full class schedule will be
available on the <a href="syllabus.html">syllabus
page.</a></p>

<p>All course announcements will occur on Canvas.</p>

<p><i>Pre-requisites:</i> It is helpful if you've taken
undergraduate level computer networks (Rutgers <a
href="https://people.cs.rutgers.edu/~sn624/352-F24/">CS
352</a> or equivalent) or operating systems (Rutgers <a
href="https://people.cs.rutgers.edu/~sn624/416-F23/">CS
416</a> or equivalent). We will cover some of this
background as necessary in this course, but you may find the
course moving a bit fast if you've never met some of those
concepts before. Talk to me for auxiliary materials to help
you prepare. You are most welcome to attend a few lectures
before you decide to keep the course for the semester.</p>

<h2>III. Grading</h2>

<p>Your final course grade will be based on the following
components:</p>

<ul>

  <li>32% in-class quizzes</li>

  <li>28% programming homeworks</li>

  <li>32% course project</li>

  <li>8% class participation</li>
  
</ul>

<p>This course uses absolute grading thresholds; there is no
curve. Any materials due on a specific day are due at 11:59
pm Eastern Time on that day.</p>

<h3>In-class quizzes (32% of course grade, every lecture
starting on 2/12)</h3>

<p>This course requires students to take quizzes on
materials taught in lecture and the assigned readings on a
regular basis: every lecture. The quizzes will be held in
the lecture room every Wednesday sometime during the lecture
hours. The first quiz will be held on 2/12, covering the
three previous lectures. Each subsequent quiz will cover
(just) the last week's lecture and assigned reading. The
last in-lecture quiz will be held on 4/30. There will be an
additional online quiz covering the lecture and reading for
4/30. The due date for the online submission of this quiz
(Canvas) will be announced separately later. Quizzes are
typically 20 minutes long. There are 11 quizzes in total; we
will drop the three lowest quiz scores to determine this
component of the grade. </p>

<p>Responding successfully to quizzes will require
significant engagement with the lecture material and the
assigned readings. You may ask private questions by
e-mailing the instructor directly. For questions that can be
public, or to invite responses from everyone else in class,
you may also use the class Discord server.  </p>

<p>Quizzes are open book. You may use an unlimited quantity
of physical materials including lecture, your own notes,
research papers, and textbooks.  However, <b>only physical
materials are permitted:</b> no iPads, laptop, cell phone or
other e-device usage is permitted during quizzes. No
collaboration is permitted with your peers during
quizzes. <b>There will be no make-up quizzes.</b></p>

<h3>Programming homeworks (28% of course grade) </h3>

<p>You will work on 2--3 programming homeworks by
yourself. You will receive approximately 2--3 weeks to work
on each homework. The homeworks will use the C/C++
programming language, Python, and shell scripting for the
most part. The homeworks are released and handed in on
Canvas. </p>

<p>The class will use VMs set up for you by CS staff. We
will provide detailed instructions to get access to the VMs.
Even if you have access to your own Linux environment, it
will be imperative that you test your software on the VM
provided. </p>

<p>To work on programming homeworks, you are free to
collaborate with each other and consult resources provided
in the course and from the Internet (also see the class AI
policy below). However, you must state in a source code
comment (situated at the very beginning of the submitted
source code file), which resources (e.g. URLs) you
consulted, state all your prompts for generative AI, and the
names of any other students that you discussed the homework
with. If there is no collaboration or reference worth
noting, please state "no collaboration" in the comment. <b>
It is mandatory to state collaboration and consulted
references in the source code comment in the file that you
hand in. Please be as complete and thorough as possible.</b></p>

<p>We will provide instructions for packaging and handing in
your programming homeworks. You must follow these
instructions exactly. If we cannot run your programs as
stated, you will lose a significant portion of points. If
you hand in a programming assignment late, you will lose a
significant fraction of points.</p>

<h3>Course project (32% of course grade)</h3>

<p>In teams of up to 3, you will work on a
programming-oriented project of your own choosing, relevant
to the course content.  The project may involve solving a
small open-ended research problem, enhancing an existing
open source codebase with new relevant feature(s),
reproducing empirical results from a paper you've read
(within or outside the syllabus), a re-implementation of an
existing technique or idea on a different system, building a
tool that makes further development or research possible or
easy, or anything else of your choosing that is relevant to
the course material. The instructor will send out a list of
seed ideas for potentially interesting course
projects. However, you are encouraged to find and work on
something <i>you</i> find exciting.</p>

<p><b>The project must involve a significant programming
component and be related to the class topics.</b> This
judgment is subjective and up to the discretion of the
instructor. You will have an opportunity to discuss with the
instructor whether your project qualifies under both
criteria above when you submit the <i>project
specification</i> document (see more info on this document
below). "Significance" of the programming is measured
through the complexity and size of the source code that you
will need to develop for the project. Relevance is typically
clear from the topic of the project. In any case, the
instructor will be happy to provide specific guidance for
each project; please contact the instructor to set up a
discussion. You are welcome to start forming teams (of up to
3), and brainstorm ideas with each other and with the
instructor as early in the semester as possible for
you. </p>

<p>More specific requirements for the course project include
the following.</p>

<p><i>(1) Project specification document (1--2 pages, due
04/02)</i> outlining:</p>

<ul> <li>a clear, specific, measurable technical goal you
can realistically achieve by the end of the semester;</li>

<li>existing prior work towards this goal;</li>

<li>a description of how your project is novel, different,
and/or builds on this prior work (there <i>must</i> be
something new about what you do, however minor or
incremental; just state it precisely);</li>

<li>a brief outline of the key technical idea or approach
you intend to implement (it is suitable to draw system
diagrams, list existing libraries and software you will use,
etc.);</li>

<li>a set of empirical, quantitative, and/or qualitative
metrics you will evaluate your project on, and the methods
you will use for your evaluation; and</li>

<li>any foreseen risks that may prevent you from achieving
your stated goal.</li>

</ul>

<p><i>(2) Project source code (due end of the semester,
tentatively 05/05)</i>. This must include all source code
required to get your software project up and running
independently. You must host the source code on a public
code hosting repository on GitHub (or equivalent). The
software package must include clear documentation
(e.g. through a README.md file) of the instructions to
replicate and check that your software works. Further,
please provide clear and specific instructions to replicate
the empirical evaluation of your software, preferably
through scripts. Also note how much time (e.g. 30 minutes)
running such evaluation scripts will require, and what we
expect to see after each experiment.</p>

<p><i>(3) Technical project report (5--10 pages, due end of
the semester, tentatively 05/05)</i> Please expand on the
components of the project specification (described
above). This is an opportunity for you to clearly and
thoroughly describe all the technical details of your
solution implementation, and the methods, setup, workloads,
etc. of the quantitative evaluation of your software, along
with the results (graphs, tables, etc.) and scientific
descriptions of why you observe these numerical results. The
report will be a single PDF file per team submitted through
Canvas. The report should include a link to the
publicly-visible project source code. Optionally, you are
welcome to provide a link to any video demonstrations or
presentations to describe your project.</p>

<p><b>It is insufficient to "just implement" something. A
quantitative evaluation of the most relevant performance
metrics, along with scientific descriptions of why your
system achieves the reported numbers, is crucial to score
well on the course project.</b></p>

<p>The ability to identify the right performance metrics for
a system, and then rigorously measuring and explaining the
values of those metrics (with the right context to interpret
them), are highly coveted skills in software development.
This part of the course project will likely benefit you well
beyond the scope of this course. Please budget sufficient
time not just to implement the software, but also to
evaluate and explain your numerical results rigorously. In
our experience, a rigorous measurement and a scientific
explanation of system metrics may take as long as
implementing the system in the first place.</p>

<h3>Course participation (8% of course grade, assessed
throughout the semester)</h3>

<p>We encourage active participation, discussion, and
collaboration by allocating a portion of the overall grade
for participation. </p>

<p><b>Please keep all interactions respectful, being mindful
of diverse viewpoints and backgrounds.</b> The class is a
forum to teach and learn from each other without judgment.
Technical discussions are highly encouraged.</p>

<p>Course participation includes, but is not limited to:</p>

<ul>

<li>Insightful questions and edifying discussion of
technical matter during lecture,</li>

<li>Insightful Discord/e-mail questions and student
responses or follow-up discussion,</li>

<li>Discussion with the instructor after lecture and/or
outside the classroom, and</li>

<li>Sharing useful materials with the rest of the class to
support collaborative learning for everyone.</li>

</ul>

Course participation is subjective and assessed by the
instructor throughout the term. <b>Course participation is
not a "one-off event": your consistency of interaction
through the term matters.</b> The grade provided by the
instructor will significantly depend on the instructor's
interactions with the student, hence it is imperative that
you get to know and meet the instructor frequently
throughout the semester.

<h2 id="course-policies">IV. PLEASE READ: Course policies (AI, collaboration,
academic integrity, and lateness)</h2>

As a general principle, this course welcomes open discussion
and intellectual collaboration. 

<h3>Use of AI</h3>

This class allows the use of AI for programming homeworks
and the class project. The summary of our AI policy is
<b>specific use with specific attribution</b>. This means
two things: (1) specific use: In general, producing the
entire solution for a homework or the software for the
course project using AI is not permitted; and (2) specific
attribution: you have to list all prompts, mention the
service that you used, and be as specific as possible in
discussing how you fixed the outputs. </p>

<p>GenAI is still experimental; it can make serious
mistakes. Do not become a victim of hallucination. You still
need to learn and understand the fundamentals of the
material to assess the outputs of AI and decide if the
solution(s) you have at hand are usable, and if not, figure
out how to fix or improve it. AI can make subtle mistakes
that inflict a lot of pain; no one (including me) can help
you if you are led to debug a complex, unreadable, and
incorrect program produced by AI. The best, most recommended
method to use AI in this class is as an assist for specific
problems, instead of using it to produce entire
solutions. Like anything else on the Internet, you can use
AI as a resource to help fill in (tedious) details, but you
still need to know what you're doing. If you have questions
about the policy, please contact your instructor.</p>

<h3>Collaboration and Academic Integrity</h3>

<p>You may freely discuss any lecture materials, assigned
paper readings, programming homeworks, or course project
concerns with the instructors and your peers.  For example,
you can get help over email from the instructors, or use the
class Discord to discuss and receive help from me or your
peers. <b>However, all source code, text, documentation, and
more generally any work submitted in this course must be
your (or your team's) own work or contain clear and specific
attribution to any external sources that were used</b>
(e.g., "software library X at https://site.com was used to
implement feature Y in the submitted program", or genAI
service "X" with prompts "A","B","C" used to fix issue
"W"). </p>

<p>You must fully understand and provide your own solutions,
rather than blindly incorporate the solutions from the
discussions, references, your peers, or AI. You are
explicitly forbidden from looking at another team's solution
code, or full solution code previously uploaded to sources
such as GitHub or CourseHero. We ask that you attribute
credit to any collaborators, including specific details on
the aspects you received help on. Copying entire solutions
is a violation of Rutgers academic integrity policies.</p>

<p><b>Copying software solutions from the web, including
from Stack Overflow, GitHub, or AI, is considered
cheating.</b> Posting questions or solutions to quizzes and
programming homeworks to GitHub or question-answering
services like Chegg or public course archives like
CourseHero will be considered a violation of Rutgers and CS
Academic Integrity Policy.</b></p>

<p><b>Violation of academic integrity policies at the
graduate level carries especially serious academic
consequences.</b> We will run software to detect plagiarism
on all material submitted by students. Ignorance of academic
integrity policies is not excusable; please ask us if you
are ever in doubt. </p>

<p><b>Collaborating on, googling, or AI-prompting answers
for in-person quizzes (and the last, online quiz) is a
violation of Rutgers integrity policy.</b></p>

<p>Each programming homework, as well as the course project,
requires you to state who you collaborated with and which
resources, possibly on the Internet, that you consulted. You
must be as thorough and complete as possible.</p>

<p>You are required to abide strictly by the <a
href="http://nbacademicintegrity.rutgers.edu/home/academic-integrity-policy/">Rutgers
New Brunswick academic integrity policy</a> and also the <a
href="https://www.cs.rutgers.edu/academics/undergraduate/academic-integrity-policy">Rutgers
Computer Science integrity policy.</a> We will use
sophisticated software to detect plagiarism. Any violations
will be reported to the University's office of student
conduct. Ignorance of integrity policies is not excusable if
you are found in violation. If you are in doubt, please ask
the instructor.</p>

<p>Rutgers University takes academic dishonesty very
seriously. By enrolling in this course, you assume
responsibility for familiarizing yourself with the Academic
Integrity Policy and the possible penalties (including
suspension and expulsion) for violating the policy. As per
the policy, all suspected violations will be reported to the
Office of Student Conduct. Academic dishonesty includes (but
is not limited to): </p>

<ul>
<li>Cheating</li>
<li>Plagiarism </li>
<li>Aiding others in committing a violation or allowing
others to use your work </li>
<li>Failure to cite sources correctly </li>
<li>Fabrication </li>
<li>Using another person’s ideas or words without
attribution, including re-using a previous assignment
</li>
<li>Unauthorized collaboration</li>
<li>Sabotaging another student’s work</li>
</ul>
<p>If you are ever in doubt, consult your instructor.</p>

<h3>Lateness</h3>

<p>In general, late submissions to any component of the
course are disallowed unless exempt by medical or religious
reasons allowable by the University or the explicit
permission of the faculty instructor.</p>

<h3>24/7 Grading Policy</h3>

<p>Please do not bring to us re-grading requests until 24 hours after
a grade for some component of the course has been released, or after 7
days have passed since the grade was released. This ensures that you
take the time to consider your regrading request, and we have enough
recent memory of the quiz/project to regrade your submission.</p>

<h2>V. Enabling your success in this course</h2>

<p>We are here to help you learn and succeed.</p>

<h3>Accommodations</h3>

Should you need accommodations, please register for
accommodations and consult the policies and procedures of
the <a href="https://ods.rutgers.edu">Office of Disability
Services website.</a>

<h3>Statement of student success and support</h3>

In the last few years, we have all been going through a lot,
individually and together. It is important to acknowledge
that events and circumstances outside of the classroom can
impact our ability to be present and engaged at any given
moment. At Rutgers, we are focused on the whole student. If,
at any point, you experience anything impacting your
performance or ability to participate in this class, please
reach out to me. Please also see the academic, health, and
mental wellness resources on the syllabus as well as others
searchable at <a
href="https://success.rutgers.edu/">https://success.rutgers.edu/</a>
for further support.

<p>Other support resources:</p>

<ul>
<li>Student Success Essentials: <a href="https://success.rutgers.edu">https://success.rutgers.edu</a> </li>
<li>Student Support Services: <a href="https://www.rutgers.edu/academics/student-support">https://www.rutgers.edu/academics/student-support</a>   </li>
<li>The Learning Centers: <a href="https://rlc.rutgers.edu/">https://rlc.rutgers.edu/</a>  </li>
<li>The Writing Centers (including Tutoring and Writing
Coaching): <a href="https://writingctr.rutgers.edu">https://writingctr.rutgers.edu</a>   </li>
<li>Rutgers Libraries: <a href="https://www.libraries.rutgers.edu/">https://www.libraries.rutgers.edu/</a> </li>
<li>Office of Veteran and Military Programs and Services: <a
href="https://veterans.rutgers.edu">https://veterans.rutgers.edu</a>  </li>
<li>Student Health Services: <a href="http://health.rutgers.edu/">http://health.rutgers.edu/</a> </li>
<li>Counseling, Alcohol and Other Drug Assistance Program &
Psychiatric Services (CAPS): <a href="http://health.rutgers.edu/medical-counseling-services/counseling/">http://health.rutgers.edu/medical-counseling-services/counseling/</a> </li>
<li>Office for Violence Prevention and Victim Assistance: <a
href="http://vpva.rutgers.edu/">http://vpva.rutgers.edu/</a>
</li>
</ul>

<h3>Questions?</h3>

The course has a Discord server (link provided on the Canvas
page). You can also email the course instructor at
sn624@cs.rutgers.edu.

<h2>Acknowledgments</h2>

Many thanks to Dave Andersen and Nick Feamster for their <a
href="https://github.com/dave-andersen/coursegen">coursegen</a>
software on which these course pages are heavily based. Many
images on the slides are from <a
href="https://openclipart.org/">openclipart.org</a> or
GPT/DALL-E.

</div>

<%= pagebottom() %>
