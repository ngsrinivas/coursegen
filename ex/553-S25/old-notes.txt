<!-- list from 2023 spring -->
<!--
<li>web architecture: web servers and protocols, naming,
content distribution, web server design, QUIC</li>

<li>system support: virtualization, containerization
(docker), and orchestration (kubernetes)</li>

<li>application architecture: microservice architectural
style, remote procedure calls, messaging queues</li>

<li>data-intensive processing: partition-aggregate pattern,
noSQL, MapReduce, Spark</li>

<li>infrastructure: the public cloud, software defined
networking, virtual switching, container policy
enforcement, service mesh</li>

<li>data centers: interconnect networks, data center
transport, wide-area transport, routing</li>

<li>high-speed packet processing: user space frameworks,
programmable kernel extensions, programmable NICs</li>

<li>monitoring: signals, distributed tracing, observability,
in-band network telemetry</li>

<li>building critical services that are reliable: failover,
load balancing, and fault tolerance</li>
-->

Chapters to read from the data-intensive apps book:

1,2,4 -> background/foundations
maybe 8/9 for distributed systems
10, 11 for mapreduce (batch processing) and stream processing (kafka
etc)

Chapters to read from building microservices book:

1, 2 -> foundations
4,5 -> communication styles (important one)
7,8,9 -> build/deployment/testing (optional)
10 -> monitoring & observability
11 -> authentication & security
12 -> resiliency! (eg. circuit breaker)

Chapters to try to read from google SRE book:

1 -> maybe intro (optional)
6 -> monitoring dist systems (principles)
10 -> monitoring (time series alerting, practice)
13, 14, 15 -> incident (during, before and after)
17 -> testing
19, 20, 21 -> load balancing & overload
23 -> distributed consensus (has lots of useful background)
33 -> lessons learned from other industries (seems useful)


=== === === ===
<li>Internet Architecture and Service delivery: layering,
protocols, routing, transport, Content Delivery Network</li>
<!-- DNS, TCP and QUIC transport -->

<li>Application architecture: web server design,
microservices, serverless, partition-aggregate,
mapreduce</li> <!-- AI? -->
<!-- batch processing & stream processing -->

<li>Infrastructure: system virtualization, containers &
orchestration, software-defined networking, network
virtualization, service communication</li> <!-- virtual
switching, network virtualization, service meshes,
communication policy -->
 
<li>Distributed system design: lock services, consensus,
distributed storage, load balancing</li>

<li>Operations: monitoring & observability, access control,
overload, scaling, incidents</li>
